import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { createContext, useState, useRef, useEffect, useContext, useId } from 'react';
import { F as FamilyAccountsSdk, S as SessionStatus, c as createFamilyAccountsClient, i as invariant } from './family-accounts-connector-BEWV2sFJ.js';
import 'events';
import 'viem';

const FamilyAccountsProviderContext = createContext(null);
const FamilyAccountsProvider = ({ children, config }) => {
    const [state, setState] = useState({
        isInitialized: false,
    });
    const [isConnecting, setIsConnecting] = useState(false);
    const connectCalledRef = useRef(false);
    const init = async () => {
        await FamilyAccountsSdk.connect(config);
    };
    const connect = async () => {
        if (isConnecting)
            return;
        setIsConnecting(true);
        try {
            await FamilyAccountsSdk.session.create();
        }
        catch (e) {
            throw new Error('Failed to create session');
        }
        finally {
            setIsConnecting(false);
        }
    };
    useEffect(() => {
        let unsubscribeSession;
        const updateSession = async (currentSession) => {
            switch (currentSession.status) {
                case SessionStatus.NOT_AUTHENTICATED:
                    setState({
                        isInitialized: true,
                        client: null,
                    });
                    break;
                case SessionStatus.AUTHENTICATED:
                    {
                        setState({
                            isInitialized: true,
                            client: await createFamilyAccountsClient(),
                        });
                    }
                    break;
            }
        };
        const onChange = async (connected) => {
            if (connected) {
                const currentSession = await FamilyAccountsSdk.session.getCurrent();
                await updateSession(currentSession);
                unsubscribeSession = FamilyAccountsSdk.session.onChange(updateSession);
            }
            else {
                unsubscribeSession?.();
                setState({ isInitialized: false });
            }
        };
        const unsubsribeConnection = FamilyAccountsSdk.onConnectionChange(onChange);
        return () => {
            unsubsribeConnection();
        };
    }, []);
    useEffect(() => {
        if (connectCalledRef.current) {
            // Already connected, done to prevent multiple calls to connect in StrictMode
            return;
        }
        connectCalledRef.current = true;
        init()
            // make sure to catch any error
            // eslint-disable-next-line no-console
            .catch(console.error);
    }, []);
    return (jsx(FamilyAccountsProviderContext.Provider, { value: {
            ...state,
            connect,
            isConnected: state.isInitialized && state.client !== null,
            isConnecting,
        }, children: children }));
};
const useFamily = () => {
    const value = useContext(FamilyAccountsProviderContext);
    if (!value) {
        throw new Error('`FamilyAccountsProvider` not found in the component tree. Make sure to wrap your app with it.');
    }
    return value;
};
const useFamilyClient = () => {
    const family = useFamily();
    if (!family.isInitialized) {
        throw new Error('Family accounts SDK is not initialized. Make sure to check `isInitialized` flag before rendering a component using the useFamilyClient Hook.');
    }
    if (!family.isConnected || !family.client) {
        throw new Error('Family accounts sdk is not initialized. Make sure to check `isConnected` flag before rendering a component using the useFamilyClient Hook.');
    }
    return family.client;
};

const globalStyles = `
    all: unset;

    max-width: 100%;
    width: 16rem;

    * {
        outline: 0;
        padding: 0;
        margin: 0;
        border: 0;
        box-sizing: border-box;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
    }
    
    --family: #018dff;
    --family-hover: #0174e0;

    @supports (color: color(display-p3 1 1 1)) {
        --family: color(display-p3 0.008 0.55 1);
        --family-hover: color(display-p3 0.007 0.45 1);
    }
`;
const connectButton = (selector) => `
@keyframes familyConnectButtonSpin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
${selector} {
    ${globalStyles}
    
    container-type: inline-size;
    container-name: family-connect-button;

    button {
        padding: 0.875rem 2rem;
        width: 100%;
        max-width: 100%;
        min-height: 3rem;

        cursor: pointer;
        user-select: none;
        position: relative;
        color: #fff;
        background: none;
        transition: all 200ms ease;

        &:before {
            content: "";
            z-index: 1;
            position: absolute;
            inset: 0;
            background-color: var(--family);
            border-radius: 1rem;
            transition: all 200ms ease;
        }

        &:disabled {
            opacity: 0.4;
            cursor: not-allowed;
            pointer-events: none;

            &:has([family-connect-button="loading"]) {
                opacity: 1;
            }
        }

        &:not(:disabled):hover:before {
            background-color: var(--family-hover);
        }

        &:not(:disabled):active:before {
            inset: 2px;
            transition-duration: 100ms;
        }

        [family-connect-button="loading"] {
            z-index: 2;
            position:absolute;
            inset:0;
            display: flex;
            align-items: center;
            justify-content: center;
            svg{
                display:block;
                width: 1.25rem;
                min-width: 1.25rem;
                animation: familyConnectButtonSpin 0.5s linear infinite;
            }
        }

        [family-connect-button="loading"] {
            opacity: 0;
            transition: opacity 100ms ease;
        }
        [family-connect-button="content"] {
            opacity: 1;
            transition: opacity 100ms ease;
        }
        &[data-pending="true"] {
            [family-connect-button="loading"] {
                opacity: 1 !important;
            }
            [family-connect-button="content"] {
                opacity: 0 !important;
            }
        }

        [family-connect-button="content"] {
            z-index: 2;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, 'Apple Color Emoji', Arial,
                sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';

            svg {
                display: block;
                width: 1.25rem;
                min-width: 1.25rem;
            }
            span {
                font-size: 1rem;
                font-weight: 500;
                text-wrap: nowrap;
                white-space: nowrap;
            }
        }
    }


    @container family-connect-button (max-width: 250px) {
        button {
            span span {
                display: none;
            }
        }
    }


    @container family-connect-button (max-width: 110px) {
        button {
            span {
                display: none;
            }
        }
    }
}
`;
const connectedButton = (selector) => `
${selector} {
    ${globalStyles}

    button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        padding: 0.875rem 1rem;

        position: relative;
        overflow: hidden;
        width: 100%;
        color: #111111;
        background: none;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica,
            "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";

        &:before {
            content: "";
            z-index: 1;
            position: absolute;
            inset: 0;
            background-color: #ececec;
            border-radius: 1rem;
            transition: all 200ms ease;
        }

        &:disabled {
            opacity: 0.4;
            cursor: not-allowed;
            pointer-events: none;

            &:has([family-connect-button="loading"]) {
                opacity: 1;
            }
        }

        &:not(:disabled):hover:before {
            background-color: #e3e3e3;
        }

        &:not(:disabled):active:before {
            inset: 2px;
            transition-duration: 100ms;
        }

        span {
            display: block;
            z-index: 2;
            position: relative;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 1rem;
            font-weight: 500;
            text-wrap: nowrap;
            white-space: nowrap;
        }
    }

}
`;

const FamilyConnectButton = ({ style, disabled, isPending, onClick, }) => {
    const id = useId();
    const selector = `[family-connect-button='${id}']`;
    return (jsxs(Fragment, { children: [jsx("style", { suppressHydrationWarning: true, children: connectButton(selector) }), jsx("div", { "family-connect-button": id, style: style, children: jsxs("button", { disabled: disabled || isPending, onClick: onClick, "data-pending": isPending, children: [jsx("div", { "family-connect-button": "loading", children: jsxs("svg", { width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("circle", { cx: "18", cy: "18", r: "16", opacity: 0.4, stroke: "currentColor", strokeWidth: "4", strokeLinecap: "round" }), jsx("path", { d: "M34 18C34 9.16344 26.8366 2 18 2", stroke: "currentColor", strokeWidth: "4", strokeLinecap: "round" })] }) }), jsxs("div", { "family-connect-button": "content", children: [jsx("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: jsx("path", { d: "M2.5255 0.106435C3.11301 -0.0448726 3.7308 -0.0342494 4.31261 0.137685C4.8945 0.30971 5.41934 0.636489 5.83018 1.083C6.24088 1.52941 6.52255 2.07889 6.64561 2.67284H6.72862C6.88663 1.91997 7.2997 1.24489 7.89757 0.760732C8.4954 0.276617 9.24155 0.0127698 10.0108 0.014638C10.7803 0.0165699 11.5257 0.284281 12.1212 0.771474C12.7166 1.25865 13.1262 1.9358 13.2804 2.68944H13.3634C13.6957 1.16725 15.0348 0.00905615 16.6564 0.0253802C17.543 0.0256294 18.3936 0.377971 19.0206 1.00487C19.6474 1.63175 19.9999 2.48169 20.0001 3.36815C20.0009 4.14959 19.7258 4.90598 19.2237 5.50487C18.7217 6.10379 18.0247 6.50688 17.255 6.64257V6.70897C18.0191 6.85798 18.7072 7.26832 19.2023 7.86913C19.6972 8.46987 19.9688 9.22361 19.9689 10.0019C19.9689 10.7804 19.6973 11.5349 19.2023 12.1357C18.7073 12.7364 18.019 13.1469 17.255 13.2959V13.3613C18.072 13.5195 18.8013 13.9764 19.2999 14.6426C19.7984 15.3087 20.0307 16.1366 19.9523 16.9648C19.8738 17.7931 19.4898 18.5624 18.8751 19.123C18.2602 19.6837 17.4583 19.9961 16.6261 19.998C15.0204 19.998 13.6632 18.8407 13.3487 17.3183H13.2657C13.1158 18.0759 12.7074 18.7582 12.1095 19.2471C11.5115 19.7359 10.7617 20.0016 9.98936 19.998C8.38367 19.998 7.02648 18.8407 6.71202 17.3183H6.62901C6.50817 17.9131 6.22816 18.4643 5.81847 18.9121C5.40883 19.3597 4.88541 19.6882 4.30382 19.8613C3.72209 20.0345 3.10364 20.0454 2.51573 19.8945C1.9281 19.7437 1.39225 19.4365 0.965927 19.0049C0.539501 18.5731 0.238258 18.033 0.094833 17.4433C-0.04858 16.8536 -0.0290448 16.2357 0.151474 15.6562C0.332005 15.0769 0.66729 14.5572 1.12022 14.1533C1.57313 13.7496 2.12764 13.4765 2.72374 13.3633V13.2978C1.95962 13.1488 1.27051 12.7385 0.775497 12.1377C0.280481 11.5369 0.00987202 10.7823 0.00987202 10.0039C0.00992048 9.22568 0.280695 8.47179 0.775497 7.87108C1.27051 7.27027 1.95961 6.85993 2.72374 6.71093V6.64452C2.12812 6.52893 1.57479 6.25373 1.12315 5.84862C0.671493 5.44344 0.337616 4.92338 0.15831 4.34374C-0.0209359 3.76423 -0.0393088 3.14688 0.104599 2.55761C0.248592 1.96821 0.550288 1.42876 0.976669 0.99706C1.40293 0.565532 1.93809 0.25779 2.5255 0.106435ZM5.93761 5.07616C5.33108 5.07633 4.84253 5.57318 4.85167 6.17968C4.86837 7.28869 4.89073 9.01165 4.89073 10.2871C4.89073 11.5614 4.86837 13.2825 4.85167 14.3916C4.84253 14.9997 5.33328 15.498 5.94151 15.498H14.2267C14.8348 15.4979 15.3247 14.9996 15.3155 14.3916C15.2988 13.2825 15.2765 11.5614 15.2765 10.2871C15.2765 9.01165 15.2988 7.28869 15.3155 6.17968C15.3247 5.57322 14.837 5.0764 14.2306 5.07616H5.93761Z", fill: "currentColor" }) }), jsxs("span", { children: [jsx("span", { children: "Continue with " }), "Family"] })] })] }) })] }));
};
const FamilyConnectedButton = ({ style, disabled, onClick }) => {
    const id = useId();
    const selector = `[family-connected-button='${id}']`;
    const client = useFamilyClient();
    invariant(client, 'Client should be authenticated');
    const address = client.account.address;
    const formattedAddress = `${address.slice(0, 6)}••••${address.slice(-4)}`;
    return (jsxs(Fragment, { children: [jsx("style", { suppressHydrationWarning: true, children: connectedButton(selector) }), jsx("div", { "family-connected-button": id, style: style, children: jsx("button", { disabled: disabled, onClick: onClick, children: jsx("span", { children: formattedAddress }) }) })] }));
};

const ConnectButton = (props) => {
    const family = useFamily();
    const styles = {
        width: props.fullWidth ? '100%' : undefined,
    };
    if (!family.isInitialized) {
        return jsx(FamilyConnectButton, { isPending: true, style: styles });
    }
    if (!family.isConnected) {
        return (jsx(FamilyConnectButton, { onClick: () => family.connect(), isPending: family.isConnecting, style: styles }));
    }
    return jsx(FamilyConnectedButton, { style: styles, onClick: () => family.client?.disconnect() });
};

export { ConnectButton, FamilyAccountsProvider, useFamily, useFamilyClient };
